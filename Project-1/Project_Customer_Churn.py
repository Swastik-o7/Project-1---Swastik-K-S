# -*- coding: utf-8 -*-
"""Project - Customer churn  .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n_L12cm_eGimKLoPn-2DLg1kfiGQ4etH
"""

import pandas as pd

df = pd.read_csv("WA_Fn-UseC_-Telco-Customer-Churn.csv")
print(df.shape)
df.head()

df.isnull().sum()

df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df['TotalCharges'].fillna(df['TotalCharges'].median(), inplace=True)

df.drop('customerID', axis=1, inplace=True)

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
for col in df.select_dtypes(include='object'):
    df[col] = le.fit_transform(df[col])

"""Exploratory Data Analysis (EDA)

a. Churn Rate Overview
"""

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='Churn', data=df)
plt.title("Churn vs No Churn Count")

"""b. Churn by Contract Type"""

sns.countplot(x='Contract', hue='Churn', data=df)
plt.title("Churn Rate by Contract Type")

"""c. Boxplots for Numerical Variables"""

sns.boxplot(x='Churn', y='MonthlyCharges', data=df)

"""d. Correlation Matrix"""

import seaborn as sns

corr = df.corr()
plt.figure(figsize=(12,8))
sns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm')

"""Model Building (Churn Prediction)

a. Split Dataset
"""

from sklearn.model_selection import train_test_split

X = df.drop('Churn', axis=1)
y = df['Churn']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""b. Train Model"""

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier()
model.fit(X_train, y_train)

"""c. Evaluate Model"""

from sklearn.metrics import classification_report, confusion_matrix

y_pred = model.predict(X_test)

print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

"""Model Explainability (with SHAP)"""

import shap

explainer = shap.TreeExplainer(model)
shap_values = explainer.shap_values(X_test)
shap.summary_plot(shap_values, X_test)

""" Customer Segmentation"""

churn_prob = model.predict_proba(X)[:, 1]  # probability of class "1" (churn)
df['Churn_Probability'] = churn_prob

conditions = [
    (df['Churn_Probability'] >= 0.6) & (df['tenure'] < 12),  # likely to leave + short stay
    (df['Churn_Probability'] < 0.3) & (df['tenure'] >= 24),  # unlikely to leave + long stay
    (df['MonthlyCharges'] < 30) & (df['tenure'] < 6),        # low usage, new
]

labels = ['At Risk', 'Loyal', 'Dormant']

df['CustomerSegment'] = 'Others'  # Default
for i in range(len(conditions)):
    df.loc[conditions[i], 'CustomerSegment'] = labels[i]

"""Segment Counts"""

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='CustomerSegment', data=df, palette='Set2')
plt.title("Customer Segments Distribution")
plt.show()

"""Churn Probability by Segment"""

sns.boxplot(x='CustomerSegment', y='Churn_Probability', data=df)
plt.title("Churn Probability by Segment")
plt.show()

df[['tenure', 'MonthlyCharges', 'Churn_Probability', 'CustomerSegment']].to_csv("customer_segments.csv", index=False)

"""Churn Count (Binary Target Distribution)"""

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='Churn', data=df, palette='Set2')
plt.title("Churn vs No Churn")
plt.xlabel("Churn")
plt.ylabel("Count")
plt.show()

"""Churn by Categorical Features

a. Churn by Gender
"""

sns.countplot(x='gender', hue='Churn', data=df, palette='husl')
plt.title("Churn by Gender")
plt.xlabel("Gender")
plt.ylabel("Count")
plt.legend(title='Churn')
plt.show()

"""b. Churn by Internet Service"""

sns.countplot(x='InternetService', hue='Churn', data=df, palette='coolwarm')
plt.title("Churn by Internet Service")
plt.show()

"""c. Churn by Contract Type"""

sns.countplot(x='Contract', hue='Churn', data=df, palette='Set3')
plt.title("Churn by Contract Type")
plt.show()

"""Numerical Feature Trends

a. Monthly Charges vs Churn
"""

sns.boxplot(x='Churn', y='MonthlyCharges', data=df, palette='Accent')
plt.title("Monthly Charges vs Churn")
plt.show()

"""b. Tenure Distribution by Churn"""

plt.figure(figsize=(10,6))
sns.histplot(data=df, x='tenure', hue='Churn', bins=30, kde=True, palette='Set1')
plt.title("Tenure Distribution by Churn")
plt.show()

"""Heatmap of Correlations

Numeric Correlation Matrix
"""

plt.figure(figsize=(14, 10))
sns.heatmap(df.select_dtypes(include='number').corr(), annot=True, cmap='YlGnBu', fmt=".2f")
plt.title("Correlation Matrix (Numeric Features Only)")
plt.show()

"""Churn by Payment Method"""

sns.countplot(y='PaymentMethod', hue='Churn', data=df, palette='coolwarm')
plt.title("Churn by Payment Method")
plt.show()